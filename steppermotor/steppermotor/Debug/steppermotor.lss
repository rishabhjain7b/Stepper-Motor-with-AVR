
steppermotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a2  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b6  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000168  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000185  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ca  00000000  00000000  0000074d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	32 d0       	rcall	.+100    	; 0x98 <main>
  34:	34 c0       	rjmp	.+104    	; 0x9e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <anticlockwise>:


void anticlockwise()
{
	int a,i;
	PORTD=0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	82 bb       	out	0x12, r24	; 18
  3c:	25 e0       	ldi	r18, 0x05	; 5
  3e:	30 e0       	ldi	r19, 0x00	; 0
	a=0x01;
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	90 e0       	ldi	r25, 0x00	; 0
     for(i=0;i<5;i++)
	 {
		PORTD=a;
  44:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	4f e9       	ldi	r20, 0x9F	; 159
  48:	56 e8       	ldi	r21, 0x86	; 134
  4a:	61 e0       	ldi	r22, 0x01	; 1
  4c:	41 50       	subi	r20, 0x01	; 1
  4e:	50 40       	sbci	r21, 0x00	; 0
  50:	60 40       	sbci	r22, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <__SREG__+0xd>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__SREG__+0x17>
  56:	00 00       	nop
		_delay_ms(500);
		a=a<<1;
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	31 09       	sbc	r19, r1
void anticlockwise()
{
	int a,i;
	PORTD=0xFF;
	a=0x01;
     for(i=0;i<5;i++)
  60:	21 15       	cp	r18, r1
  62:	31 05       	cpc	r19, r1
  64:	79 f7       	brne	.-34     	; 0x44 <__SREG__+0x5>
	 {
		PORTD=a;
		_delay_ms(500);
		a=a<<1;
      }  //TODO:: Please write your application code 
    }
  66:	08 95       	ret

00000068 <clockwise>:

void clockwise()
{
	int a,i;
	PORTD=0xFF;
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	82 bb       	out	0x12, r24	; 18
  6c:	25 e0       	ldi	r18, 0x05	; 5
  6e:	30 e0       	ldi	r19, 0x00	; 0
	a=0x08;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	90 e0       	ldi	r25, 0x00	; 0
	
		for(i=0;i<5;i++)
		{
			PORTD=a;
  74:	82 bb       	out	0x12, r24	; 18
  76:	4f e9       	ldi	r20, 0x9F	; 159
  78:	56 e8       	ldi	r21, 0x86	; 134
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	41 50       	subi	r20, 0x01	; 1
  7e:	50 40       	sbci	r21, 0x00	; 0
  80:	60 40       	sbci	r22, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <clockwise+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <clockwise+0x1e>
  86:	00 00       	nop
			_delay_ms(500);
			a=a>>1;
  88:	95 95       	asr	r25
  8a:	87 95       	ror	r24
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	31 09       	sbc	r19, r1
{
	int a,i;
	PORTD=0xFF;
	a=0x08;
	
		for(i=0;i<5;i++)
  90:	21 15       	cp	r18, r1
  92:	31 05       	cpc	r19, r1
  94:	79 f7       	brne	.-34     	; 0x74 <clockwise+0xc>
		{
			PORTD=a;
			_delay_ms(500);
			a=a>>1;
		}  //TODO:: Please write your application code
	}
  96:	08 95       	ret

00000098 <main>:
void main()
{
	while(1)
	{
		
		clockwise();
  98:	e7 df       	rcall	.-50     	; 0x68 <clockwise>
		anticlockwise();
  9a:	ce df       	rcall	.-100    	; 0x38 <anticlockwise>
  9c:	fd cf       	rjmp	.-6      	; 0x98 <main>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
